{"version":3,"file":"main.838070984b4de13a5468.bundle.js","sources":["webpack:///./projects/form-elements/src/lib/f-email/f-email.component.ts"],"sourcesContent":["import { Component, Inject, forwardRef } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\nimport fuzzysearch from 'fuzzysearch'\nimport { FInputComponent } from '../f-input/f-input.component'\nimport { ModuleOptions, OPTIONS } from '../options'\n\n@Component({\n    selector: 'cmp-f-email',\n    template: require('./f-email.component.html'),\n    providers: [{ provide: FInputComponent, useExisting: forwardRef(() => FEmailComponent) }],\n})\nexport class FEmailComponent extends FInputComponent {\n    public static readonly cmpName: string = 'FEmailComponent'\n\n    public suggestions$: BehaviorSubject<string[]> = new BehaviorSubject([])\n\n    private providers: string[] = [\n        'aol.com',\n        'arcor.de',\n        'freenet.de',\n        'gmail.com',\n        'gmx.at',\n        'gmx.com',\n        'gmx.de',\n        'gmx.net',\n        'googlemail.com',\n        'hotmail.com',\n        'hotmail.de',\n        'icloud.com',\n        'live.com',\n        'live.de',\n        'mac.com',\n        'me.com',\n        'msn.com',\n        'online.de',\n        'outlook.com',\n        't-online.de',\n        'web.de',\n        'yahoo.com',\n        'yahoo.de',\n    ]\n\n    public constructor(@Inject(OPTIONS) private options: ModuleOptions) {\n        super()\n    }\n\n    public suggest(): void {\n        if (!this.options.email || !this.options.email.suggestions) {\n            return\n        }\n\n        const value = this.fc.value.match(/(.*)@(.*)/)\n        if (!value || value.length <= 2 || value[1].length === 0 || value[2].length === 0) {\n            this.suggestions$.next([])\n            return\n        }\n\n        this.suggestions$.next(this.fetchSuggestions().filter(item => fuzzysearch(value[2], item)))\n    }\n\n    public use(suggestion: string): void {\n        if (!this.options.email.suggestions) {\n            return\n        }\n\n        const parts = this.fc.value.split('@')\n        const input = parts.slice(0, parts.length - 1).join('@')\n\n        this.fc.setValue(`${input}@${suggestion}`)\n        this.suggestions$.next([])\n    }\n\n    public close(): void {\n        this.suggestions$.next([])\n    }\n\n    private fetchSuggestions(): string[] {\n        const suggestions = this.options.email.suggestions\n        if (Array.isArray(suggestions) && suggestions.length > 0) {\n            return suggestions\n        }\n\n        return this.providers\n    }\n}\n"],"mappings":"AAWA","sourceRoot":""}